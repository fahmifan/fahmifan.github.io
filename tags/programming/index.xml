<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Miun173</title>
    <link>https://miun173.github.io/tags/programming/</link>
    <description>Recent content in Programming on Miun173</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 05 Apr 2020 15:43:31 +0700</lastBuildDate>
    
	<atom:link href="https://miun173.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Apa Itu Event Bus ?</title>
      <link>https://miun173.github.io/blog/apa-itu-event-bus/</link>
      <pubDate>Sun, 05 Apr 2020 15:43:31 +0700</pubDate>
      
      <guid>https://miun173.github.io/blog/apa-itu-event-bus/</guid>
      <description>Event bus adalah sebuah mekanisme yg bisa dipakai untuk berkomunikasi antar komponen tanpa saling tahu satu sama lain. Kalau bisa saya bilang ini juga bagian pub-sub pattern. Lalu, apa kegunaan dari event bus ini? Kegunaanya adalah untuk decoupled antar komponen sehingga tidak saling bergantung secara langsung. Keuntungan lainnya adalah, kita bisa membuat monolith rasa microservice. Dalam arsitektur microservice, salah satu pattern yg sering dipakai adalah pubsub, dan kita bisa menerapkan pubsub ini dalam arsitektur monolith melalui event bus.</description>
    </item>
    
    <item>
      <title>Background Job Worker</title>
      <link>https://miun173.github.io/blog/background-job-worker/</link>
      <pubDate>Tue, 09 Jul 2019 08:06:42 +0700</pubDate>
      
      <guid>https://miun173.github.io/blog/background-job-worker/</guid>
      <description>Dalam pengembangan web, request yang memerlukan process yang lama (long running) dapat memblokir request lain. Kalo seperti ini, maka web kita tidak responsive dan cepat. Process lama ini dapat kita alihkan ke process lain yang berjalan di samping process utama yang disebut worker.
Salah satu pattern umum untuk menggunakan worker adalah ketika ada request ke web servis, maka akan di-reply langsung, lalu akan dijadawlkan task dari request tersebut ke worker. Misalkan kita mendapat requirement sbb:</description>
    </item>
    
  </channel>
</rss>